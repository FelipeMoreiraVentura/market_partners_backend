import json
from fastapi import FastAPI
from pydantic import BaseModel
from fastapi.middleware.cors import CORSMiddleware
import base64

from app.services.identify_image import identify_image
from app.services.llm import gpt

class setProductProps(BaseModel):
    product: str

class ImageUpload(BaseModel):
    image: str
    
class Chat(BaseModel):
    image: str 
    prompt: str

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"], 
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


@app.get("/ping")
def ping():
    return {"message": "pong"}



@app.post("/identify_image")
def identify(payload: ImageUpload):
    image_bytes = base64.b64decode(payload.image)
    return identify_image(image_bytes)
    


@app.post("/chat")
async def chat(payload: Chat):
    product = identify_image(base64.b64decode(payload.image))[0]["classe"] if payload.image else "usuario n√£o mandou"

    menssage = [
    {
        "rule": "system",
        "content": (
            "Voc√™ √© um assistente direto, √∫til e educado. Opera em um site de vendas, ajudando o usuario a tirar duvidas relacionadas aos produtos"
            "Seu nome √© PartnersBot"
            "O nome do site √© Market Partners"
            "Market Partners √© um site de compras com um chatbot que tem como base dados os produtos cadastrados, atravez de imagem e perguntas, o usuario tem suas duvidas sanadas e uma grande ajuda para achar seu produto. Os vendedores tambem s√£o ajudados, comuma ia que pela foto de um produto ajuda na descri√ß√£o e t√≠tulo para o anuncio"
            "Parters √© a empresa que criou a aplica√ß√£o, seu foco √© a implementa√ß√£o de IAs em √°reas que ainda n√£o est√£o avan√ßadas de forma efetiva e que podem ajudar as pessoas"
            "Escreva sem quebra de linha, ou seja sem \\n"
            "Sempre ajude o cliente a buscar uma solu√ß√£o para seu problema, examinando a situa√ß√£o at√© encontrar o produto ideal"
            "O objetivo √© ajudar o usu√°rio com d√∫vidas sobre produtos. "
            "Se houver imagem, ela est√° no final do prompt. "
            "Recomenda√ß√µes para o usuario sobre a imagem: prduto cenralizado, de preferencia imagens 1:1(formato quadrado), fundo limpo ou cor s√≥lida e ambiente bem iluminado. O modelo que √© usado para detectar as imagnes, √© simples, ele so detecta qual item esta presente na imagem, sem nenhuma caracterisca ou algo do tipo"
            "Se o valor da imagem for 'usuario n√£o mandou', √© porque o envio de imagem √© opcional"
            "Responda sempre em portugu√™s, de forma amig√°vel e clara."
            "N√£o recomende ou comente sobre outros locais que vendem os produtos"
            "Desconverse qualquer assunto paralelo ao que foi definifo"
        )
    },
    {
        "rule": "user",
        "content": f"{payload.prompt}\n\nimagem: {product}"
    }
]

    return gpt(menssage, 0.7)



@app.post("/set_product")
async def setProduct(payload: setProductProps):
    prompt = f'''
                    Voc√™ √© um gerador autom√°tico de dados de produto. Sua √∫nica fun√ß√£o √© gerar **apenas um JSON v√°lido e formatado corretamente**, sem nenhum texto fora dele.

                    ---

                    üîí **INSTRU√á√ïES IMPORTANTES (siga exatamente):**
                    - NUNCA escreva nada fora do JSON.
                    - N√ÉO escreva frases de introdu√ß√£o, explica√ß√µes ou "JSON:" antes da resposta.
                    - SUA RESPOSTA DEVE SER SOMENTE o JSON.

                    ---

                    üì¶ Dado o nome de um produto, gere o seguinte JSON com essas chaves:

                    - "name": um t√≠tulo curto, amig√°vel e atrativo para o produto.
                    - "description": uma descri√ß√£o objetiva e clara sobre o que √© o produto, como pode ser usado, e quais benef√≠cios ele oferece.

                    **‚ö†Ô∏è Observa√ß√µes:**
                    - Voc√™ **n√£o conhece** a marca, material ou caracter√≠sticas exatas do produto.
                    - Portanto, destaque pontos que o usu√°rio precisar√° preencher depois (ex: tamanho, cor, modelo), e diga o que seria interessante ter no an√∫ncio.

                    ---

                    üéØ **Exemplo de formato correto (n√£o escreva esse texto, apenas imite a estrutura):**

                    {{
                    "name": "Fone de Ouvido Bluetooth",
                    "description": "Ideal para quem busca praticidade no dia a dia. Informe aqui a dura√ß√£o da bateria, alcance do Bluetooth e recursos como microfone ou cancelamento de ru√≠do."
                    }}

                    ---
                    **Se n√£o entender o produto, devolva**
                    {{
                        "name": "Produto desconhecido",
                        "description": "N√£o foi poss√≠vel identificar o produto."
                    }}

                    ---

                    üìå Produto: {payload.product}

                    (Sua resposta come√ßa na pr√≥xima linha. Lembre: apenas o JSON!)

            '''
            
    menssage = [
        {
        "rule": "user",
        "content": prompt
        }
    ]

    resposta = gpt(menssage, 1)

    return json.loads(resposta)

    

